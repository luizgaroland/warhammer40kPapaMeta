# Makefile for Wahapedia Scraper Service

.PHONY: help build run stop restart logs shell test clean dev prod

# Variables
DOCKER_COMPOSE = docker-compose
SERVICE_NAME = wahapedia-scraper
IMAGE_NAME = wahapedia-scraper:latest

# Colors for output
CYAN = \033[0;36m
GREEN = \033[0;32m
RED = \033[0;31m
YELLOW = \033[1;33m
NC = \033[0m # No Color

help: ## Show this help message
	@echo "${CYAN}Wahapedia Scraper Service - Available Commands${NC}"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "${GREEN}%-20s${NC} %s\n", $$1, $$2}'

# Docker Commands
build: ## Build Docker images
	@echo "${YELLOW}Building Docker images...${NC}"
	$(DOCKER_COMPOSE) build

build-no-cache: ## Build Docker images without cache
	@echo "${YELLOW}Building Docker images without cache...${NC}"
	$(DOCKER_COMPOSE) build --no-cache

run: ## Start all services
	@echo "${GREEN}Starting all services...${NC}"
	$(DOCKER_COMPOSE) up -d
	@echo "${GREEN}Services started successfully!${NC}"

run-attached: ## Start all services with logs attached
	@echo "${GREEN}Starting all services (attached)...${NC}"
	$(DOCKER_COMPOSE) up

stop: ## Stop all services
	@echo "${YELLOW}Stopping all services...${NC}"
	$(DOCKER_COMPOSE) stop

down: ## Stop and remove all containers
	@echo "${RED}Stopping and removing all containers...${NC}"
	$(DOCKER_COMPOSE) down

restart: ## Restart all services
	@echo "${YELLOW}Restarting all services...${NC}"
	$(DOCKER_COMPOSE) restart

# Service Management
start-scraper: ## Start only the scraper service
	$(DOCKER_COMPOSE) up -d $(SERVICE_NAME)

start-worker: ## Start only the Celery worker
	$(DOCKER_COMPOSE) up -d celery-worker

start-beat: ## Start only the Celery beat scheduler
	$(DOCKER_COMPOSE) up -d celery-beat

start-redis: ## Start only Redis
	$(DOCKER_COMPOSE) up -d redis

start-postgres: ## Start only PostgreSQL
	$(DOCKER_COMPOSE) up -d postgres

# Logs
logs: ## Show logs for all services
	$(DOCKER_COMPOSE) logs -f

logs-scraper: ## Show logs for scraper service
	$(DOCKER_COMPOSE) logs -f $(SERVICE_NAME)

logs-worker: ## Show logs for Celery worker
	$(DOCKER_COMPOSE) logs -f celery-worker

logs-beat: ## Show logs for Celery beat
	$(DOCKER_COMPOSE) logs -f celery-beat

logs-tail: ## Tail last 100 lines of logs
	$(DOCKER_COMPOSE) logs --tail=100

# Shell Access
shell: ## Open shell in scraper container
	@echo "${CYAN}Opening shell in scraper container...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) /bin/bash

shell-worker: ## Open shell in worker container
	$(DOCKER_COMPOSE) exec celery-worker /bin/bash

shell-redis: ## Open Redis CLI
	$(DOCKER_COMPOSE) exec redis redis-cli

shell-postgres: ## Open PostgreSQL CLI
	$(DOCKER_COMPOSE) exec postgres psql -U postgres -d wahapedia_scraper

# Database Management
db-migrate: ## Run database migrations
	@echo "${YELLOW}Running database migrations...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) alembic upgrade head

db-rollback: ## Rollback last migration
	@echo "${YELLOW}Rolling back last migration...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) alembic downgrade -1

db-reset: ## Reset database (WARNING: Deletes all data)
	@echo "${RED}Resetting database (this will delete all data)...${NC}"
	$(DOCKER_COMPOSE) exec postgres psql -U postgres -c "DROP DATABASE IF EXISTS wahapedia_scraper;"
	$(DOCKER_COMPOSE) exec postgres psql -U postgres -c "CREATE DATABASE wahapedia_scraper;"
	$(MAKE) db-migrate

# Testing
test: ## Run tests
	@echo "${CYAN}Running tests...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) pytest

test-coverage: ## Run tests with coverage
	@echo "${CYAN}Running tests with coverage...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) pytest --cov=app --cov-report=html --cov-report=term

test-unit: ## Run unit tests only
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) pytest tests/unit

test-integration: ## Run integration tests only
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) pytest tests/integration

# Code Quality
lint: ## Run linting
	@echo "${CYAN}Running linters...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) flake8 app/
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) pylint app/

format: ## Format code with black
	@echo "${CYAN}Formatting code...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) black app/
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) isort app/

type-check: ## Run type checking with mypy
	@echo "${CYAN}Running type checks...${NC}"
	$(DOCKER_COMPOSE) exec $(SERVICE_NAME) mypy app/

# Monitoring
monitor: ## Open Flower (Celery monitoring)
	@echo "${GREEN}Opening Flower at http://localhost:5555${NC}"
	@open http://localhost:5555 2>/dev/null || xdg-open http://localhost:5555 2>/dev/null || echo "Please open http://localhost:5555 in your browser"

health: ## Check health of all services
	@echo "${CYAN}Checking service health...${NC}"
	@curl -f http://localhost:8002/health || echo "${RED}Scraper service is not healthy${NC}"
	@$(DOCKER_COMPOSE) exec redis redis-cli ping || echo "${RED}Redis is not healthy${NC}"
	@$(DOCKER_COMPOSE) exec postgres pg_isready || echo "${RED}PostgreSQL is not healthy${NC}"

metrics: ## Show Prometheus metrics
	@curl http://localhost:9002/metrics

# Maintenance
clean: ## Clean up containers, volumes, and images
	@echo "${RED}Cleaning up Docker resources...${NC}"
	$(DOCKER_COMPOSE) down -v
	docker image prune -f
	docker container prune -f
	@echo "${GREEN}Cleanup complete!${NC}"

clean-all: ## Deep clean including all volumes and orphan containers
	@echo "${RED}Performing deep clean...${NC}"
	$(DOCKER_COMPOSE) down -v --remove-orphans
	docker system prune -af --volumes
	@echo "${GREEN}Deep cleanup complete!${NC}"

backup: ## Backup database
	@echo "${YELLOW}Backing up database...${NC}"
	@mkdir -p backups
	$(DOCKER_COMPOSE) exec postgres pg_dump -U postgres wahapedia_scraper > backups/wahapedia_scraper_$$(date +%Y%m%d_%H%M%S).sql
	@echo "${GREEN}Backup complete!${NC}"

restore: ## Restore database from latest backup
	@echo "${YELLOW}Restoring database from latest backup...${NC}"
	@latest_backup=$$(ls -t backups/*.sql | head -1); \
	if [ -z "$$latest_backup" ]; then \
		echo "${RED}No backup found!${NC}"; \
	else \
		cat $$latest_backup | $(DOCKER_COMPOSE) exec -T postgres psql -U postgres wahapedia_scraper; \
		echo "${GREEN}Restored from $$latest_backup${NC}"; \
	fi

# Environment Management
env-copy: ## Copy .env.example to .env
	@cp .env.example .env
	@echo "${GREEN}.env file created from .env.example${NC}"

env-validate: ## Validate environment variables
	@echo "${CYAN}Validating environment variables...${NC}"
	@$(DOCKER_COMPOSE) config

# Development
dev: ## Start services in development mode
	@echo "${GREEN}Starting in development mode...${NC}"
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml up

dev-rebuild: ## Rebuild and start in development mode
	@echo "${YELLOW}Rebuilding for development...${NC}"
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.dev.yml build
	$(MAKE) dev

# Production
prod: ## Start services in production mode
	@echo "${GREEN}Starting in production mode...${NC}"
	$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.prod.yml up -d

prod-deploy: ## Full production deployment
	@echo "${YELLOW}Deploying to production...${NC}"
	$(MAKE) build
	$(MAKE) db-migrate
	$(MAKE) prod
	@echo "${GREEN}Production deployment complete!${NC}"

# Utilities
ps: ## Show running containers
	$(DOCKER_COMPOSE) ps

stats: ## Show container statistics
	docker stats --no-stream $$($(DOCKER_COMPOSE) ps -q)

version: ## Show service versions
	@echo "${CYAN}Service Versions:${NC}"
	@$(DOCKER_COMPOSE) exec $(SERVICE_NAME) python --version
	@$(DOCKER_COMPOSE) exec redis redis-server --version
	@$(DOCKER_COMPOSE) exec postgres psql --version
